// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.3
// source: proto/mockserver/mock_server.proto

package mockserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetMockUrlRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Url            string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ResponseCode   string                 `protobuf:"bytes,2,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseHeader string                 `protobuf:"bytes,3,opt,name=responseHeader,proto3" json:"responseHeader,omitempty"`
	ResponseBody   string                 `protobuf:"bytes,4,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	Owner          string                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Rules          []*Rule                `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetMockUrlRequest) Reset() {
	*x = SetMockUrlRequest{}
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMockUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMockUrlRequest) ProtoMessage() {}

func (x *SetMockUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMockUrlRequest.ProtoReflect.Descriptor instead.
func (*SetMockUrlRequest) Descriptor() ([]byte, []int) {
	return file_proto_mockserver_mock_server_proto_rawDescGZIP(), []int{0}
}

func (x *SetMockUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SetMockUrlRequest) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *SetMockUrlRequest) GetResponseHeader() string {
	if x != nil {
		return x.ResponseHeader
	}
	return ""
}

func (x *SetMockUrlRequest) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *SetMockUrlRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SetMockUrlRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetMockUrlRequest) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MatchType      int32                  `protobuf:"varint,1,opt,name=matchType,proto3" json:"matchType,omitempty"`
	MatchRule      string                 `protobuf:"bytes,2,opt,name=matchRule,proto3" json:"matchRule,omitempty"`
	ResponseCode   string                 `protobuf:"bytes,3,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseHeader string                 `protobuf:"bytes,4,opt,name=responseHeader,proto3" json:"responseHeader,omitempty"`
	ResponseBody   string                 `protobuf:"bytes,5,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	DelayTime      int32                  `protobuf:"varint,6,opt,name=delayTime,proto3" json:"delayTime,omitempty"`
	Description    string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_proto_mockserver_mock_server_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *Rule) GetMatchRule() string {
	if x != nil {
		return x.MatchRule
	}
	return ""
}

func (x *Rule) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *Rule) GetResponseHeader() string {
	if x != nil {
		return x.ResponseHeader
	}
	return ""
}

func (x *Rule) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *Rule) GetDelayTime() int32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *Rule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SetMockUrlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMockUrlResponse) Reset() {
	*x = SetMockUrlResponse{}
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMockUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMockUrlResponse) ProtoMessage() {}

func (x *SetMockUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMockUrlResponse.ProtoReflect.Descriptor instead.
func (*SetMockUrlResponse) Descriptor() ([]byte, []int) {
	return file_proto_mockserver_mock_server_proto_rawDescGZIP(), []int{2}
}

func (x *SetMockUrlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetMockUrlResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	RequestBody   string                 `protobuf:"bytes,2,opt,name=requestBody,proto3" json:"requestBody,omitempty"`
	QueryParams   string                 `protobuf:"bytes,3,opt,name=queryParams,proto3" json:"queryParams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MockRequest) Reset() {
	*x = MockRequest{}
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockRequest) ProtoMessage() {}

func (x *MockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockRequest.ProtoReflect.Descriptor instead.
func (*MockRequest) Descriptor() ([]byte, []int) {
	return file_proto_mockserver_mock_server_proto_rawDescGZIP(), []int{3}
}

func (x *MockRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MockRequest) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *MockRequest) GetQueryParams() string {
	if x != nil {
		return x.QueryParams
	}
	return ""
}

type MockResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResponseCode   string                 `protobuf:"bytes,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseHeader string                 `protobuf:"bytes,2,opt,name=responseHeader,proto3" json:"responseHeader,omitempty"`
	ResponseBody   string                 `protobuf:"bytes,3,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MockResponse) Reset() {
	*x = MockResponse{}
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockResponse) ProtoMessage() {}

func (x *MockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mockserver_mock_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockResponse.ProtoReflect.Descriptor instead.
func (*MockResponse) Descriptor() ([]byte, []int) {
	return file_proto_mockserver_mock_server_proto_rawDescGZIP(), []int{4}
}

func (x *MockResponse) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *MockResponse) GetResponseHeader() string {
	if x != nil {
		return x.ResponseHeader
	}
	return ""
}

func (x *MockResponse) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

var File_proto_mockserver_mock_server_proto protoreflect.FileDescriptor

var file_proto_mockserver_mock_server_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0xf5, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x0b, 0x4d, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7e, 0x0a, 0x0c,
	0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x32, 0x9f, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x6f, 0x75,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x63, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_mockserver_mock_server_proto_rawDescOnce sync.Once
	file_proto_mockserver_mock_server_proto_rawDescData []byte
)

func file_proto_mockserver_mock_server_proto_rawDescGZIP() []byte {
	file_proto_mockserver_mock_server_proto_rawDescOnce.Do(func() {
		file_proto_mockserver_mock_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_mockserver_mock_server_proto_rawDesc), len(file_proto_mockserver_mock_server_proto_rawDesc)))
	})
	return file_proto_mockserver_mock_server_proto_rawDescData
}

var file_proto_mockserver_mock_server_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_mockserver_mock_server_proto_goTypes = []any{
	(*SetMockUrlRequest)(nil),  // 0: mockserver.SetMockUrlRequest
	(*Rule)(nil),               // 1: mockserver.Rule
	(*SetMockUrlResponse)(nil), // 2: mockserver.SetMockUrlResponse
	(*MockRequest)(nil),        // 3: mockserver.MockRequest
	(*MockResponse)(nil),       // 4: mockserver.MockResponse
}
var file_proto_mockserver_mock_server_proto_depIdxs = []int32{
	1, // 0: mockserver.SetMockUrlRequest.rules:type_name -> mockserver.Rule
	0, // 1: mockserver.MockServer.SetMockUrl:input_type -> mockserver.SetMockUrlRequest
	3, // 2: mockserver.MockServer.GetMockResponse:input_type -> mockserver.MockRequest
	2, // 3: mockserver.MockServer.SetMockUrl:output_type -> mockserver.SetMockUrlResponse
	4, // 4: mockserver.MockServer.GetMockResponse:output_type -> mockserver.MockResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_mockserver_mock_server_proto_init() }
func file_proto_mockserver_mock_server_proto_init() {
	if File_proto_mockserver_mock_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_mockserver_mock_server_proto_rawDesc), len(file_proto_mockserver_mock_server_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mockserver_mock_server_proto_goTypes,
		DependencyIndexes: file_proto_mockserver_mock_server_proto_depIdxs,
		MessageInfos:      file_proto_mockserver_mock_server_proto_msgTypes,
	}.Build()
	File_proto_mockserver_mock_server_proto = out.File
	file_proto_mockserver_mock_server_proto_goTypes = nil
	file_proto_mockserver_mock_server_proto_depIdxs = nil
}
